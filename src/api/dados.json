{
  "data": {
    "setting": {
      "id": "61f1c5eb74c95ac8770eea84",
      "blogName": "Dev Sobrinho",
      "blogDescription": "Portfolio, tecnologias, notícias, artigos e inovações tecnologicas.",
      "logo": {
        "id": "61f1979457d51b87b5d85712",
        "alternativeText": "",
        "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643222932/favicon_97160edba1.png"
      },
      "menuLink": [
        {
          "id": "61f1c5eb74c95ac8770eea85",
          "link": "#home",
          "text": "home",
          "newTab": false
        },
        {
          "id": "61f1c5eb74c95sac8770eea85",
          "link": "outra",
          "text": "#outra",
          "newTab": false
        },
        {
          "id": "61f1c5eab74c95ac8770eea85",
          "link": "mais uma",
          "text": "#mais uma",
          "newTab": false
        },
        {
          "id": "61f1c5eb74c925ac8770eea85",
          "link": "quase a ultima",
          "text": "#quase a ultima",
          "newTab": false
        },
        {
          "id": "61f1c5ebe74c95ac8770eea85",
          "link": "ultima",
          "text": "#ultima",
          "newTab": false
        }
      ],
      "footer": "<p>O texto da Footer</p>"
    },
    "posts": [
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1a125b437b7967b396bae",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdc4dcb91eb98abd8971",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1a125b437b7967b396bae1",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bed7dcssb91eb98abd8973",
            "displayName": "teste",
            "slug": "teste"
          },
          {
            "id": "61f1bed7dcb91eb98abd8973",
            "displayName": "teste",
            "slug": "teste"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdc4dcb91eb98abd89721",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1a125b437b7967b3s96bae",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdc4dcb91eab98abd8971",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1a125b437bf7967b396bwwqqae",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdac4dcb91eb98abd8971",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1a125b437bf7967b396bae",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdc4dcb91eb9sad8abd8971",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1a125b437b796da7b396bae",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdc4aadcb91eb98abd8971",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1ga125b437b7967b396bae",
        "slug": "teste",
        "title": "All the Lorem Ipsum generators on the Internet tend to repeat",
        "excerpt": "ard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, a",
        "content": "<h2 style=\"margin-left:0px;text-align:center;\">Lorem Ipsum</h2><h4 style=\"margin-left:10px;text-align:center;\"><i>\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"</i></h4><p>\"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\"</p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">What is Lorem Ipsum?</h2><p style=\"margin-left:0px;text-align:center;\"><strong>Lorem Ipsum</strong> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><h2 style=\"margin-left:0px;text-align:center;\">Why do we use it?</h2><p style=\"margin-left:0px;text-align:center;\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><h2 style=\"margin-left:0px;text-align:center;\">Where does it come from?</h2><p style=\"margin-left:0px;text-align:center;\">Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><p style=\"margin-left:0px;text-align:center;\">The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p><h2 style=\"margin-left:0px;text-align:center;\">Where can I get some?</h2><p style=\"margin-left:0px;text-align:center;\">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p><figure class=\"table\" style=\"text-align:center;width:436.797px;\"><table style=\"background-color:rgb(255, 255, 255);border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;\"><tbody><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\" rowspan=\"2\"><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">paragraphs</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">words</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">bytes</p><p style=\"margin-left:0px;\">&nbsp;</p><p style=\"margin-left:0px;\">lists</p></td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;width:20px;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\"><p style=\"margin-left:0px;\">Start with 'Lorem<br>ipsum dolor sit amet...'</p></td></tr><tr><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;text-align:center;\">&nbsp;</td><td style=\"border-bottom:0px;border-left:0px;border-right:0px;border-top:0px;padding:0px;\">&nbsp;</td></tr></tbody></table></figure><p style=\"margin-left:0px;text-align:center;\"><br>&nbsp;</p><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Translations:</strong> Can you help translate this site into a foreign language ? Please email us with details if you can help.</p><hr><p style=\"margin-left:0px;text-align:center;\">There is a set of mock banners available <a href=\"https://www.lipsum.com/banners\"><strong>here</strong></a> in three colours and in a range of standard banner sizes:<br>&nbsp;</p><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/black_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/grey_234x60.gif\" alt=\"Banners\"></figure><figure class=\"image\"><img src=\"https://www.lipsum.com/images/banners/white_234x60.gif\" alt=\"Banners\"></figure><hr><p style=\"margin-left:0px;text-align:center;\"><strong>Donate:</strong> If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click <a href=\"https://www.lipsum.com/donate\"><strong>here</strong></a> to donate using PayPal. Thank you for your support.</p><p style=\"margin-left:0px;text-align:center;\"><strong>Donate Bitcoin:</strong> 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF</p><hr><p style=\"margin-left:0px;text-align:center;\"><a href=\"https://github.com/traviskaufman/node-lipsum\">NodeJS</a> <a href=\"http://code.google.com/p/pypsum/\">Python Interface</a> <a href=\"http://gtklipsum.sourceforge.net/\">GTK Lipsum</a> <a href=\"http://github.com/gsavage/lorem_ipsum/tree/master\">Rails</a> <a href=\"https://github.com/cerkit/LoremIpsum/\">.NET</a> <a href=\"http://groovyconsole.appspot.com/script/64002\">Groovy</a></p><hr><p style=\"margin-left:0px;text-align:center;\">&nbsp;</p><hr><h3 style=\"margin-left:0px;text-align:center;\"><strong>The standard Lorem Ipsum passage, used since the 1500s</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"</p><h3 style=\"margin-left:0px;text-align:center;\"><strong>1914 translation by H. Rackham</strong></h3><p style=\"margin-left:0px;text-align:center;\">\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"</p><p>&nbsp;</p><p style=\"margin-left:0px;\">&nbsp;</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1a108b437b7967b396bad",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643225348/0bbc3d47bac364c50b42c4b810fe602c7ef6f2bf_1_197a38aca9.jpg"
        },
        "categories": [
          {
            "id": "61f1a022b437b7967b396ba9",
            "displayName": "Python",
            "slug": "python"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f1bc7adcb91eb98abd896e",
          "displayName": "Cebele Odeto",
          "slug": "cebele-odeto"
        }
      },
      {
        "createdAt": "2021-03-02T15:16:09.246+00:00",
        "id": "61f1bdc4hdcb91eb98abd8971",
        "slug": "how-to-use-object-destructuring-in-java-script",
        "title": "How to Use Object Destructuring in JavaScript",
        "excerpt": "how to use Object Destructuring in JavaScript",
        "content": "<p>The object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.</p><p>What's better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn't exist.</p><p>In this post, I'll explain how to use object destructuring in JavaScript.</p><h3>Table of Contents</h3><ul style=\"list-style-type:none;\"><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#1-the-need-for-object-destructuring\">1. The need for object destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#2-extracting-a-property\">2. Extracting a property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#3-extracting-multiple-properties\">3. Extracting multiple properties</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#4-default-values\">4. Default values</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#5-aliases\">5. Aliases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#6-extracting-properties-from-nested-objects\">6. Extracting properties from nested objects</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#7-extracting-a-dynamic-name-property\">7. Extracting a dynamic name property</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#8-rest-object-after-destructuring\">8. Rest object after destructuring</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#9-common-use-cases\">9. Common use cases</a></li><li><a href=\"https://dmitripavlutin.com/javascript-object-destructuring/#10-summary\">10. Summary</a></li></ul><h2>1. The need for object destructuring</h2><p>Imagine you'd like to extract some properties of an object. In a pre-ES2015 environment, you would need to write the following code:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>The property <code>hero.name</code> value is assigned to the variable <code>name</code>. Same way <code>hero.realName</code> value is assigned to <code>realName</code>.</p><p>Such a way to access properties and assign them to variables requires boilerplate code. By writing <code>var name = hero.name</code>, you have to mention the <code>name</code> binding 2 times, and the same for <code>realName</code>.</p><p>That's where the object destructuring syntax is useful: you can read a property and assign its value to a variable without duplicating the property name. More than that, you can read multiple properties from the same object in just one statement!</p><p>Let's refactor the above script and apply the object destructuring to access the properties <code>name</code> and <code>realName</code>:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> is an object destructuring assignment. This statement defines the variables <code>name</code> and <code>realName</code>, then assigns to them the values of properties <code>hero.name</code> and <code>hero.realName</code> correspondigly.</p><p>Comparing the 2 approaches to access the object properties:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> &nbsp; &nbsp; = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// is equivalent to:</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>it's visible that the object destructuring is handier because neither the property names nor the object variable is duplicated.</p><figure class=\"image\"><a href=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/7842b/javascript-object-destructuring-infographic-2.png\"><img src=\"https://dmitripavlutin.com/static/c6d9d0af2d1b6e8d0c88dad3f41f55f4/360ab/javascript-object-destructuring-infographic-2.png\" alt=\"JavaScript Object Destructuring Inforgraphic\"></a></figure><h2>2. Extracting a property</h2><p>The basic syntax of object destructuring is pretty simple:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value.</p><p>Here's the equivalent code using a <a href=\"https://dmitripavlutin.com/access-object-properties-javascript/#1-dot-property-accessor\">property accessor</a>:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's try the object destructuring in practice:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>The statement <code>const { name } = hero</code> defines the variable <code>name</code> and initializes it with the value of <code>hero.name</code> property.</p><h2>3. Extracting multiple properties</h2><p>To destructure the object into multiple properties, enumerate as many properties as you like adding commas <code>,</code> in-between:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>, ..., </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier1</code>, ..., <code>identifierN</code> are names of properties to access, and <code>expression</code> should evaluate to an object. After the destructuring, the variables <code>identifier1</code>, ..., <code>identifierN</code> contain corresponding properties values.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier1</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier2</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><span style=\"color:rgb(0,128,0);\"><code>// ...</code></span></p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifierN</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's take a look again at the example from the first section, where 2 properties are extracted:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, </code></span><span style=\"color:rgb(0,112,193);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman',</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p><code>const { name, realName } = hero</code> creates 2 variables <code>name</code> and <code>realName</code> assigned with values of corresponding properties <code>hero.name</code> and <code>hero.realName</code>.</p><h2>4. Default values</h2><p>If the destructured object doesn't have the property specified in the destructuring assignment, then the variable is assigned with <code>undefined</code>. Let's see how it happens:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; undefined</code></span></p><p>After destructuring the variable <code>enemies</code> is <code>undefined</code> because the property <code>enemies</code> doesn't exist in the object <code>hero</code>.</p><p>Fortunately, you can set a default value if the property doesn't exist in the destructured object. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>identifier</code> contains the property value or is assigned with <code>defaultValue</code> if <code>identifier</code> property doesn't exist.</p><p>Here's the equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> === </code></span><span style=\"color:rgb(0,0,255);\"><code>undefined</code></span><span style=\"color:rgb(0,0,0);\"><code> ?&nbsp;</code></span></p><p><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>defaultValue</code></span><span style=\"color:rgb(0,0,0);\"><code> : </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Let's change the previous code sample, and use the default value feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code>] } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>enemies</code></span><span style=\"color:rgb(0,0,0);\"><code>; &nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Joker']</code></span></p><p>Now, instead of being <code>undefined</code>, the variable <code>enemies</code> defaults to <code>['Joker']</code>.</p><h2>5. Aliases</h2><p>If you'd like to create variables of different names than the properties, then you can use the aliasing feature of object destructuring.</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>identifier</code> is the name of the property to access, <code>aliasIdentifier</code> is the variable name, and <code>expression</code> should evaluate to an object. After the destructuring, the variable <code>aliasIdentifier</code> contains the property value.</p><p>The equivalent code:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>aliasIdentifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Here's an example of object destructuring alias feature:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>realName</code></span><span style=\"color:rgb(0,0,0);\"><code>: </code></span><span style=\"color:rgb(0,112,193);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>secretName</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Bruce Wayne'</code></span></p><p>Looking at <code>const { realName: secretName } = hero</code>, the destucturing defines a new variable <code>secretName</code> (alias variable), and assigns to it the value <code>hero.realName</code>.</p><h2>6. Extracting properties from nested objects</h2><p>In the previous examples, the objects were plain: the properties have primitive data types (e.g. strings).</p><p>Often objects can be nested in other objects. In other words, some properties can contain objects.</p><p>In such case, you still can use the object destructuring and access properties from deep. Here's the basic syntax:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>nestedObjectProp</code> is the name of the property that holds a nested object. <code>identifier</code> is the property name to access from the nested object. <code>expression</code> should evaluate to the destructured object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value of the nested object.</p><p>The above syntax is equivalent to:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>nestedObjectProp</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(0,16,128);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>The level of nesting you can extract properties from is unlimited. If you want to extract properties from deep, just add more nested curly braces:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>propA</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propB</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,16,128);\"><code>propC</code></span><span style=\"color:rgb(0,0,0);\"><code>: { .... } } } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>object</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>For example, the object <code>hero</code> contains a nested object <code>{ city: 'Gotham'}</code>.</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>address:</code></span><span style=\"color:rgb(0,0,0);\"><code> {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(0,16,128);\"><code>city:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Gotham'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// Object destructuring:</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>address</code></span><span style=\"color:rgb(0,0,0);\"><code>: { </code></span><span style=\"color:rgb(0,112,193);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code> } } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>city</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Gotham'</code></span></p><p>The object destructuring <code>const { address: { city } } = hero</code> let's you access the property <code>city</code> from the nested object.</p><h2>7. Extracting a dynamic name property</h2><p>You can extract to variables properties with a dynamic name (the property name is known at runtime):</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p><code>propName</code> expression should evaluate to a property name (usually a string), and the <code>identifier</code> should indicate the variable name created after the destructuring. The second <code>expression</code> should evaluate to the object you'd like to destructure.</p><p>An equivalent code without object destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>[</code></span><span style=\"color:rgb(0,16,128);\"><code>propName</code></span><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p>Let's look at an example where <code>prop</code> holds the property name:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(163,21,21);\"><code>'name'</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { [</code></span><span style=\"color:rgb(0,16,128);\"><code>prop</code></span><span style=\"color:rgb(0,0,0);\"><code>]: </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p><code>const { [prop]: name } = hero</code> is an object destructuring that assigns to variable <code>name</code> the value <code>hero[prop]</code>, where <code>prop</code> is a variable holding the property name.</p><h2>8. Rest object after destructuring</h2><p>The rest syntax is useful to collect the remaining properties after the destructuring:</p><p><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>identifier</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>rest</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>expression</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p>Where <code>identifier</code> is the name of the property to access and <code>expression</code> should evaluate to an object.</p><p>After the destructuring, the variable <code>identifier</code> contains the property value. <code>rest</code> variable is a plain object with the remaining properties.</p><p>For example, let's extract the property <code>name</code>, but keep the rest of the properties:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>realName:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Bruce Wayne'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>, ...</code></span><span style=\"color:rgb(0,112,193);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>realHero</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; { realName: 'Bruce Wayne' }</code></span></p><p>The destructuring <code>const { name, ...realHero } = hero</code> extracts the property <code>name</code>.</p><p>At the same time, the remaining properties (<code>realName</code> in this case) are collected into the variable <code>realHero</code>: <code>{ realName: 'Bruce Wayne' }</code>.</p><h2>9. Common use cases</h2><h3>9.1 Bind properties to variables</h3><p>As seen in many examples before, the object destructuring binds property values to variables.</p><p>The object destructuring can assign values to variables declared using <code>const</code>, <code>let</code> and <code>var</code>. Or even assign to an already existing variable.</p><p>For example, here's how to destructure using <code>let</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// let</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>How to destructure using <code>var</code> statement:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// var</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,255);\"><code>var</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>And how to destructure to an already declared variable:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,128,0);\"><code>// existing variable</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>let</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code> = {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code>,</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>};</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } = </code></span><span style=\"color:rgb(0,16,128);\"><code>hero</code></span><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; 'Batman'</code></span></p><p>I find it satisfying to combine <code>for..of</code> cycle with object destructuring to extract the property right away:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(175,0,219);\"><code>for</code></span><span style=\"color:rgb(0,0,0);\"><code> (</code></span><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> { </code></span><span style=\"color:rgb(0,112,193);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> } </code></span><span style=\"color:rgb(0,0,255);\"><code>of</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,16,128);\"><code>console</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>log</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>); </code></span><span style=\"color:rgb(0,128,0);\"><code>// logs 'Batman', 'Joker'</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>}</code></span></p><h3>9.2 Function parameter destructuring</h3><p>Generally, the object destructuring can be placed anywhere where an assignment happens.</p><p>For instance, you could destruct an object right inside the parameters list of a function:</p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code> = [</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Batman'</code></span><span style=\"color:rgb(0,0,0);\"><code> },</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; { </code></span><span style=\"color:rgb(0,16,128);\"><code>name:</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(163,21,21);\"><code>'Joker'</code></span><span style=\"color:rgb(0,0,0);\"><code> }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>];</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,255);\"><code>const</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,112,193);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code> = </code></span><span style=\"color:rgb(0,16,128);\"><code>heroes</code></span><span style=\"color:rgb(0,0,0);\"><code>.</code></span><span style=\"color:rgb(121,94,38);\"><code>map</code></span><span style=\"color:rgb(0,0,0);\"><code>(</code></span></p><p style=\"margin-left:-0.75rem;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; </code></span><span style=\"color:rgb(0,0,255);\"><code>function</code></span><span style=\"color:rgb(0,0,0);\"><code>({ </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code> }) {</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; &nbsp;&nbsp;</code></span><span style=\"color:rgb(175,0,219);\"><code>return</code></span><span style=\"color:rgb(0,0,0);\"><code> </code></span><span style=\"color:rgb(0,16,128);\"><code>name</code></span><span style=\"color:rgb(0,0,0);\"><code>;</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>&nbsp; }</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,0,0);\"><code>);</code></span></p><p style=\"margin-left:0px;\"><span style=\"color:rgb(0,16,128);\"><code>names</code></span><span style=\"color:rgb(0,0,0);\"><code>; </code></span><span style=\"color:rgb(0,128,0);\"><code>// =&gt; ['Batman', 'Joker']</code></span></p><p><code>function({ name })</code> destructures the function parameter, creating a variable <code>name</code> holding the value of <code>name</code> property.</p><h2>10. Summary</h2><p>The object destructuring is a powerful feature that lets you extract properties from an object and bind these values to variables.</p><p>I especially like about object destructuring is the concise syntax and ability to extract multiple variables in one statement.</p><p>Hopefully, my post has helped you see how useful object destructuring is!</p>",
        "allowComments": true,
        "cover": {
          "id": "61f1bd7bdcb91eb98abd8970",
          "alternativeText": "",
          "url": "https://res.cloudinary.com/dhgenbrm2/image/upload/v1643232632/cover_e70136009c.webp"
        },
        "categories": [
          {
            "id": "61f19fa8b437b7967b396ba7",
            "displayName": "JavaScript",
            "slug": "java-script"
          }
        ],
        "tags": [
          {
            "id": "61f1bcdadcb9dwdw1eb98abd896f",
            "displayName": "Object Destructuring",
            "slug": "object-destructuring"
          },
          {
            "id": "61f1bcdadcb91eb98wdwabd896f",
            "displayName": "Object Destructuring 2",
            "slug": "object-destructuring-2"
          },
          {
            "id": "61f1bcdadcb91eb98ddabd896f",
            "displayName": "Object Destructuring 3",
            "slug": "object-destructuring-3"
          },
          {
            "id": "61f1bcdadcb91eb98abd8a96f",
            "displayName": "Object Destructuring 4",
            "slug": "object-destructuring-4"
          }
        ],
        "author": {
          "id": "61f19f6fb437b7967b396ba6",
          "displayName": "Daniel Sobrinho",
          "slug": "daniel-sobrinho"
        }
      }
    ]
  }
}
